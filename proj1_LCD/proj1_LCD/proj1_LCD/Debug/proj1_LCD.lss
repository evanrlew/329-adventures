
proj1_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000023a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076f  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000170  00000000  00000000  00001207  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ce  00000000  00000000  00001377  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000162  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000095  00000000  00000000  0000190a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e3       	ldi	r30, 0x3A	; 58
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 31       	cpi	r26, 0x14	; 20
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a4 e1       	ldi	r26, 0x14	; 20
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a4 31       	cpi	r26, 0x14	; 20
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  e2:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <lcd_wr_cmd>:
#define F_CPU 16000000UL  	// tells compiler the freq of your processor
#include <util/delay.h>    // software delay functions
#include <avr/interrupt.h>

void lcd_wr_cmd(uint8_t input) {
	PORTB |= 0b00000100; // E = 1
  ea:	2a 9a       	sbi	0x05, 2	; 5
	PORTD = input;
  ec:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_wr_cmd+0x6>
  f4:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1 << 2); // E = 0
  f6:	2a 98       	cbi	0x05, 2	; 5
}
  f8:	08 95       	ret

000000fa <lcd_wr_data>:

void lcd_wr_data(uint8_t input) {
	PORTB |= 0b00000001; // RS = 1
  fa:	28 9a       	sbi	0x05, 0	; 5
  fc:	95 e0       	ldi	r25, 0x05	; 5
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_wr_data+0x4>
 102:	00 00       	nop
	_delay_us(1);
	
	PORTD = input;
 104:	8b b9       	out	0x0b, r24	; 11
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_wr_data+0xe>
 10c:	00 00       	nop
	_delay_us(1);
	
	PORTB |= 0b00000101; // RS = 1, E = 1
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	85 60       	ori	r24, 0x05	; 5
 112:	85 b9       	out	0x05, r24	; 5
 114:	95 e0       	ldi	r25, 0x05	; 5
 116:	9a 95       	dec	r25
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_wr_data+0x1c>
 11a:	00 00       	nop
	_delay_us(1);
	
	//PORTB = 0b00000001; // RS = 1, E = 0
	//_delay_us(1);
	
	PORTB &= ~(5); // RS = 0, E = 0
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8a 7f       	andi	r24, 0xFA	; 250
 120:	85 b9       	out	0x05, r24	; 5
 122:	8f e8       	ldi	r24, 0x8F	; 143
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_wr_data+0x2c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_wr_data+0x32>
 12c:	00 00       	nop
	_delay_us(100); // Delay after each write
}
 12e:	08 95       	ret

00000130 <lcd_write_string>:

void lcd_write_string(char* inputString) {
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ec 01       	movw	r28, r24
	while(*inputString) {
 136:	88 81       	ld	r24, Y
 138:	88 23       	and	r24, r24
 13a:	31 f0       	breq	.+12     	; 0x148 <lcd_write_string+0x18>
	
	PORTB &= ~(5); // RS = 0, E = 0
	_delay_us(100); // Delay after each write
}

void lcd_write_string(char* inputString) {
 13c:	21 96       	adiw	r28, 0x01	; 1
	while(*inputString) {
		lcd_wr_data(*inputString);
 13e:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_wr_data>
	PORTB &= ~(5); // RS = 0, E = 0
	_delay_us(100); // Delay after each write
}

void lcd_write_string(char* inputString) {
	while(*inputString) {
 142:	89 91       	ld	r24, Y+
 144:	88 23       	and	r24, r24
 146:	d9 f7       	brne	.-10     	; 0x13e <lcd_write_string+0xe>
		lcd_wr_data(*inputString);
		inputString++;
	}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <main>:

int main(void) {
	DDRD = 0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00000111;
 152:	87 e0       	ldi	r24, 0x07	; 7
 154:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	93 ef       	ldi	r25, 0xF3	; 243
 15a:	a1 e0       	ldi	r26, 0x01	; 1
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	a0 40       	sbci	r26, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xe>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x18>
 166:	00 00       	nop
	
	_delay_ms(40);

	lcd_wr_cmd(0b00111000);
 168:	88 e3       	ldi	r24, 0x38	; 56
 16a:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	a7 ec       	ldi	r26, 0xC7	; 199
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	11 97       	sbiw	r26, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0x24>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x2a>
 178:	00 00       	nop
	_delay_us(50);
	
	lcd_wr_cmd(0b00001100); // turn on display
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
 180:	87 ec       	ldi	r24, 0xC7	; 199
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x36>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x3c>
 18a:	00 00       	nop
	_delay_us(50);
	
	lcd_wr_cmd(0b00000001); // clear display
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	af e1       	ldi	r26, 0x1F	; 31
 194:	be e4       	ldi	r27, 0x4E	; 78
 196:	11 97       	sbiw	r26, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x48>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x4e>
 19c:	00 00       	nop
	_delay_ms(5);
	
	lcd_wr_cmd(0b00000110); // set entry mode
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
 1a4:	8f e9       	ldi	r24, 0x9F	; 159
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x5a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x60>
 1ae:	00 00       	nop
	_delay_ms(1);
	
	
	//lcd_wr_data(0b00000001);
	
	lcd_wr_cmd(0b01001000); //set cg ram address
 1b0:	88 e4       	ldi	r24, 0x48	; 72
 1b2:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	a7 ec       	ldi	r26, 0xC7	; 199
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	11 97       	sbiw	r26, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0x6c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x72>
 1c0:	00 00       	nop
	_delay_us(50);
	
	
	lcd_wr_data(0b00000);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_wr_data>
	lcd_wr_data(0b00000);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_wr_data>
	lcd_wr_data(0b00000);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_wr_data>
	lcd_wr_data(0b01010);
 1d4:	8a e0       	ldi	r24, 0x0A	; 10
 1d6:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_wr_data>
	lcd_wr_data(0b00000);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_wr_data>
	lcd_wr_data(0b10001);
 1e0:	81 e1       	ldi	r24, 0x11	; 17
 1e2:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_wr_data>
	lcd_wr_data(0b01110);
 1e6:	8e e0       	ldi	r24, 0x0E	; 14
 1e8:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_wr_data>
	lcd_wr_data(0b00000);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_wr_data>
	
	lcd_wr_cmd(0b10000000); // set dd ram address
 1f2:	80 e8       	ldi	r24, 0x80	; 128
 1f4:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
 1f8:	87 ec       	ldi	r24, 0xC7	; 199
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0xae>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0xb4>
 202:	00 00       	nop
	_delay_us(50);
						
	lcd_write_string("Hello World!");
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 98 00 	call	0x130	; 0x130 <lcd_write_string>
	while (2) {
		if (PINB ^ 1 << PB3) {
			lcd_wr_cmd(0b00000001); // clear display
			_delay_ms(5);
			
			lcd_write_string("329 = ");
 20c:	cd e0       	ldi	r28, 0x0D	; 13
 20e:	d1 e0       	ldi	r29, 0x01	; 1
	_delay_us(50);
						
	lcd_write_string("Hello World!");

	while (2) {
		if (PINB ^ 1 << PB3) {
 210:	83 b1       	in	r24, 0x03	; 3
 212:	88 30       	cpi	r24, 0x08	; 8
 214:	e9 f3       	breq	.-6      	; 0x210 <main+0xc2>
			lcd_wr_cmd(0b00000001); // clear display
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	af e1       	ldi	r26, 0x1F	; 31
 21e:	be e4       	ldi	r27, 0x4E	; 78
 220:	11 97       	sbiw	r26, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0xd2>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0xd8>
 226:	00 00       	nop
			_delay_ms(5);
			
			lcd_write_string("329 = ");
 228:	ce 01       	movw	r24, r28
 22a:	0e 94 98 00 	call	0x130	; 0x130 <lcd_write_string>
			lcd_wr_data(1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_wr_data>
 234:	ed cf       	rjmp	.-38     	; 0x210 <main+0xc2>

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>

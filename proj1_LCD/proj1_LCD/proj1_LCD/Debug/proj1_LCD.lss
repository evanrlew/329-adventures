
proj1_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000256  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000a28  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072a  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000182  00000000  00000000  000011d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c2  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000162  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000db  00000000  00000000  000018da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e5       	ldi	r30, 0x56	; 86
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a8 e0       	ldi	r26, 0x08	; 8
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a8 30       	cpi	r26, 0x08	; 8
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  e2:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <lcd_wr_cmd>:
#include <avr/io.h>    	// registers locations and some other things
#define F_CPU 16000000UL  	// tells compiler the freq of your processor
#include <util/delay.h>    // software delay functions

void lcd_wr_cmd(uint8_t input) {
	PORTB = 0b00000100; // E = 1
  ea:	94 e0       	ldi	r25, 0x04	; 4
  ec:	95 b9       	out	0x05, r25	; 5
	PORTD = input;
  ee:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_wr_cmd+0x8>
  f6:	00 00       	nop
	_delay_us(1);
	PORTB = 0b00000000; // E = 0
  f8:	15 b8       	out	0x05, r1	; 5
}
  fa:	08 95       	ret

000000fc <lcd_wr_data>:

void lcd_wr_data(uint8_t input) {
	PORTB = 0b00000001; // RS = 1
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	95 b9       	out	0x05, r25	; 5
 100:	95 e0       	ldi	r25, 0x05	; 5
 102:	9a 95       	dec	r25
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_wr_data+0x6>
 106:	00 00       	nop
	_delay_us(1);
	
	PORTD = input;
 108:	8b b9       	out	0x0b, r24	; 11
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_wr_data+0x10>
 110:	00 00       	nop
	_delay_us(1);
	
	PORTB = 0b00000101; // RS = 1, E = 1
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	85 b9       	out	0x05, r24	; 5
 116:	95 e0       	ldi	r25, 0x05	; 5
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_wr_data+0x1c>
 11c:	00 00       	nop
	_delay_us(1);
	
	//PORTB = 0b00000001; // RS = 1, E = 0
	//_delay_us(1);
	
	PORTB = 0b00000000; // RS = 0, E = 0
 11e:	15 b8       	out	0x05, r1	; 5
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_wr_data+0x26>
 126:	00 00       	nop
	_delay_us(1);
}
 128:	08 95       	ret

0000012a <lcd_write_string>:

void lcd_write_string(char* inputString) {
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
	while(*inputString) {
 130:	88 81       	ld	r24, Y
 132:	88 23       	and	r24, r24
 134:	09 f4       	brne	.+2      	; 0x138 <lcd_write_string+0xe>
 136:	4b c0       	rjmp	.+150    	; 0x1ce <lcd_write_string+0xa4>
	
	PORTB = 0b00000000; // RS = 0, E = 0
	_delay_us(1);
}

void lcd_write_string(char* inputString) {
 138:	21 96       	adiw	r28, 0x01	; 1
	while(*inputString) {
		switch(*inputString) {
 13a:	84 34       	cpi	r24, 0x44	; 68
 13c:	19 f1       	breq	.+70     	; 0x184 <lcd_write_string+0x5a>
 13e:	85 34       	cpi	r24, 0x45	; 69
 140:	48 f4       	brcc	.+18     	; 0x154 <lcd_write_string+0x2a>
 142:	82 34       	cpi	r24, 0x42	; 66
 144:	b9 f0       	breq	.+46     	; 0x174 <lcd_write_string+0x4a>
 146:	83 34       	cpi	r24, 0x43	; 67
 148:	c8 f4       	brcc	.+50     	; 0x17c <lcd_write_string+0x52>
 14a:	81 32       	cpi	r24, 0x21	; 33
 14c:	79 f1       	breq	.+94     	; 0x1ac <lcd_write_string+0x82>
 14e:	81 34       	cpi	r24, 0x41	; 65
 150:	89 f5       	brne	.+98     	; 0x1b4 <lcd_write_string+0x8a>
 152:	0c c0       	rjmp	.+24     	; 0x16c <lcd_write_string+0x42>
 154:	88 34       	cpi	r24, 0x48	; 72
 156:	f1 f0       	breq	.+60     	; 0x194 <lcd_write_string+0x6a>
 158:	89 34       	cpi	r24, 0x49	; 73
 15a:	18 f4       	brcc	.+6      	; 0x162 <lcd_write_string+0x38>
 15c:	85 34       	cpi	r24, 0x45	; 69
 15e:	51 f5       	brne	.+84     	; 0x1b4 <lcd_write_string+0x8a>
 160:	15 c0       	rjmp	.+42     	; 0x18c <lcd_write_string+0x62>
 162:	8c 34       	cpi	r24, 0x4C	; 76
 164:	d9 f0       	breq	.+54     	; 0x19c <lcd_write_string+0x72>
 166:	8f 34       	cpi	r24, 0x4F	; 79
 168:	29 f5       	brne	.+74     	; 0x1b4 <lcd_write_string+0x8a>
 16a:	1c c0       	rjmp	.+56     	; 0x1a4 <lcd_write_string+0x7a>
			case 'A': lcd_wr_data(0b01000001); break;
 16c:	81 e4       	ldi	r24, 0x41	; 65
 16e:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_wr_data>
 172:	23 c0       	rjmp	.+70     	; 0x1ba <lcd_write_string+0x90>
			case 'B': lcd_wr_data(0b01000010); break;
 174:	82 e4       	ldi	r24, 0x42	; 66
 176:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_wr_data>
 17a:	1f c0       	rjmp	.+62     	; 0x1ba <lcd_write_string+0x90>
			case 'C': lcd_wr_data(0b01000011); break;
 17c:	83 e4       	ldi	r24, 0x43	; 67
 17e:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_wr_data>
 182:	1b c0       	rjmp	.+54     	; 0x1ba <lcd_write_string+0x90>
			case 'D': lcd_wr_data(0b01000100); break;
 184:	84 e4       	ldi	r24, 0x44	; 68
 186:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_wr_data>
 18a:	17 c0       	rjmp	.+46     	; 0x1ba <lcd_write_string+0x90>
			case 'E': lcd_wr_data(0b01000101); break;
 18c:	85 e4       	ldi	r24, 0x45	; 69
 18e:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_wr_data>
 192:	13 c0       	rjmp	.+38     	; 0x1ba <lcd_write_string+0x90>
			case 'H': lcd_wr_data(0b01001000); break;
 194:	88 e4       	ldi	r24, 0x48	; 72
 196:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_wr_data>
 19a:	0f c0       	rjmp	.+30     	; 0x1ba <lcd_write_string+0x90>
			case 'L': lcd_wr_data(0b01001100); break;
 19c:	8c e4       	ldi	r24, 0x4C	; 76
 19e:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_wr_data>
 1a2:	0b c0       	rjmp	.+22     	; 0x1ba <lcd_write_string+0x90>
			case 'O': lcd_wr_data(0b01001111); break;
 1a4:	8f e4       	ldi	r24, 0x4F	; 79
 1a6:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_wr_data>
 1aa:	07 c0       	rjmp	.+14     	; 0x1ba <lcd_write_string+0x90>
			case '!': lcd_wr_data(0b00100001); break;			
 1ac:	81 e2       	ldi	r24, 0x21	; 33
 1ae:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_wr_data>
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <lcd_write_string+0x90>
	
			default: lcd_wr_data(0b1111111); break;
 1b4:	8f e7       	ldi	r24, 0x7F	; 127
 1b6:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_wr_data>
 1ba:	8f e8       	ldi	r24, 0x8F	; 143
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_write_string+0x94>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_write_string+0x9a>
 1c4:	00 00       	nop
	PORTB = 0b00000000; // RS = 0, E = 0
	_delay_us(1);
}

void lcd_write_string(char* inputString) {
	while(*inputString) {
 1c6:	89 91       	ld	r24, Y+
 1c8:	88 23       	and	r24, r24
 1ca:	09 f0       	breq	.+2      	; 0x1ce <lcd_write_string+0xa4>
 1cc:	b6 cf       	rjmp	.-148    	; 0x13a <lcd_write_string+0x10>
			default: lcd_wr_data(0b1111111); break;
		}
		_delay_us(100);
		inputString++;
	}
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:

int main(void) {
	DDRD = 0xFF;
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00000111;
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	93 ef       	ldi	r25, 0xF3	; 243
 1e0:	a1 e0       	ldi	r26, 0x01	; 1
 1e2:	81 50       	subi	r24, 0x01	; 1
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	a0 40       	sbci	r26, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0xe>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x18>
 1ec:	00 00       	nop
	
	_delay_ms(40);

	lcd_wr_cmd(0b00111000);
 1ee:	88 e3       	ldi	r24, 0x38	; 56
 1f0:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	a7 ec       	ldi	r26, 0xC7	; 199
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	11 97       	sbiw	r26, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x24>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x2a>
 1fe:	00 00       	nop
	_delay_us(50);
	
	lcd_wr_cmd(0b00001111); // turn on display
 200:	8f e0       	ldi	r24, 0x0F	; 15
 202:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
 206:	87 ec       	ldi	r24, 0xC7	; 199
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x36>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x3c>
 210:	00 00       	nop
	_delay_us(50);
	
	lcd_wr_cmd(0b00000001); // clear display
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	af e1       	ldi	r26, 0x1F	; 31
 21a:	be e4       	ldi	r27, 0x4E	; 78
 21c:	11 97       	sbiw	r26, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <main+0x48>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x4e>
 222:	00 00       	nop
	_delay_ms(5);
	
	lcd_wr_cmd(0b00000110); // set entry mode
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
 22a:	8f e9       	ldi	r24, 0x9F	; 159
 22c:	9f e0       	ldi	r25, 0x0F	; 15
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <main+0x5a>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x60>
 234:	00 00       	nop
	_delay_ms(1);
	
	//lcd_wr_cmd(0b10000000);
	//lcd_wr_cmd(0b00011100); // move the cursor thing
		
	lcd_wr_cmd(0b10000000);
 236:	80 e8       	ldi	r24, 0x80	; 128
 238:	0e 94 75 00 	call	0xea	; 0xea <lcd_wr_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	af e8       	ldi	r26, 0x8F	; 143
 23e:	b1 e0       	ldi	r27, 0x01	; 1
 240:	11 97       	sbiw	r26, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x6c>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x72>
 246:	00 00       	nop
	_delay_us(100);
	
//	lcd_wr_data(0x41);
	
	lcd_write_string("HELLO!");
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_write_string>
 250:	ff cf       	rjmp	.-2      	; 0x250 <main+0x7c>

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>

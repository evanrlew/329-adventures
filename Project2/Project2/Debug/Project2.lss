
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000003ea  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000b40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079f  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b9  00000000  00000000  000013bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049c  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c0  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e0  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_17>
  48:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_18>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_24>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e5       	ldi	r30, 0x56	; 86
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a4 30       	cpi	r26, 0x04	; 4
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  e2:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <initTimer1>:
	return 0;
}  // end main

void initTimer1(void)
{
	TCCR1A = 0x00;                          // configure counter wave mode and compare mode
  ea:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1<<CS11)|(1<<CS10)|(1<<WGM12);          // clock prescale 1/64, wave mode
  ee:	8b e0       	ldi	r24, 0x0B	; 11
  f0:	80 93 81 00 	sts	0x0081, r24
	OCR1AH = 0x01;                          // compare reg a = 500
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0xF4;
  fa:	84 ef       	ldi	r24, 0xF4	; 244
  fc:	80 93 88 00 	sts	0x0088, r24
	OCR1BH = 0x00;                          // compare reg b = 256
 100:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = 0x7D;
 104:	8d e7       	ldi	r24, 0x7D	; 125
 106:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = (1<<ICIE1)|(1<<OCIE1A)|(1<<OCIE1B); // enable interupts for a and b
 10a:	86 e2       	ldi	r24, 0x26	; 38
 10c:	80 93 6f 00 	sts	0x006F, r24
	TIFR1 = 0x00;
 110:	16 ba       	out	0x16, r1	; 22

}
 112:	08 95       	ret

00000114 <set_pulse>:

void set_pulse(uint16_t duty, uint16_t freq) {
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
	uint16_t ticks_per_period = F_CPU / TIMER1_PRESCALE / freq;
 11a:	9b 01       	movw	r18, r22
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	60 e9       	ldi	r22, 0x90	; 144
 122:	70 ed       	ldi	r23, 0xD0	; 208
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__divmodsi4>
	uint16_t ticks_per_duty = ticks_per_period * duty / 100;
 12c:	2c 9f       	mul	r18, r28
 12e:	c0 01       	movw	r24, r0
 130:	2d 9f       	mul	r18, r29
 132:	90 0d       	add	r25, r0
 134:	3c 9f       	mul	r19, r28
 136:	90 0d       	add	r25, r0
 138:	11 24       	eor	r1, r1
 13a:	64 e6       	ldi	r22, 0x64	; 100
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__udivmodhi4>
	
	// calculate and set frequency
	OCR1AH = ticks_per_period >> 8;                          // compare reg a
 142:	30 93 89 00 	sts	0x0089, r19
	OCR1AL = ticks_per_period & 0xFF;
 146:	20 93 88 00 	sts	0x0088, r18
	
	// calculate and set duty
	OCR1BH = ticks_per_duty >> 8;                          // compare reg b
 14a:	70 93 8b 00 	sts	0x008B, r23
	OCR1BL = ticks_per_duty & 0xFF;
 14e:	60 93 8a 00 	sts	0x008A, r22
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <set_DAC_data>:

void set_DAC_data(int data) {
	SPI_MSB = (data >> 8 & 0xF) | 0x70;
 158:	9f 70       	andi	r25, 0x0F	; 15
 15a:	90 67       	ori	r25, 0x70	; 112
 15c:	90 93 02 01 	sts	0x0102, r25
	SPI_LSB = data & 0xFF;
 160:	80 93 01 01 	sts	0x0101, r24
}
 164:	08 95       	ret

00000166 <Initialize_SPI_Master>:

void Initialize_SPI_Master(void)
{
	SPCR = (1<<SPIE) | 		//No interrupts
 166:	80 ed       	ldi	r24, 0xD0	; 208
 168:	8c bd       	out	0x2c, r24	; 44
	(1<<MSTR) | 			//master
	(0<<CPOL) | 			//clock idles low
	(0<<CPHA) | 			//sample falling clock edge
	(0<<SPR1) | (0<<SPR0) ; //clock speed
	
	SPSR = (0<<SPIF) | 		//SPI interrupt flag
 16a:	1d bc       	out	0x2d, r1	; 45
	(0<<WCOL) | 			//Write collision flag
	(0<<SPI2X) ; 			//Doubles SPI clock
	PORTB = 1 << SS;  		// make sure SS is high
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	85 b9       	out	0x05, r24	; 5
}
 170:	08 95       	ret

00000172 <main>:
{
	int count = 0;
	int val = 0;
	int incr = 0x100 / 16;
	
	initTimer1();
 172:	0e 94 75 00 	call	0xea	; 0xea <initTimer1>
	sei();
 176:	78 94       	sei
	
	DDRB = 1<<MOSI | 1<<SCK | 1<<SS;	// make MOSI, SCK and SS outputs
 178:	87 e0       	ldi	r24, 0x07	; 7
 17a:	84 b9       	out	0x04, r24	; 4
	Initialize_SPI_Master();
 17c:	0e 94 b3 00 	call	0x166	; 0x166 <Initialize_SPI_Master>
	
	set_pulse(23, 500);
 180:	87 e1       	ldi	r24, 0x17	; 23
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	64 ef       	ldi	r22, 0xF4	; 244
 186:	71 e0       	ldi	r23, 0x01	; 1
 188:	0e 94 8a 00 	call	0x114	; 0x114 <set_pulse>
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x1a>

0000018e <Transmit_SPI_Master>:
	PORTB = 1 << SS;  		// make sure SS is high
}

void Transmit_SPI_Master(void) {
	
	if (SPI_STATE == XFER_FINISHED) {
 18e:	80 91 03 01 	lds	r24, 0x0103
 192:	88 23       	and	r24, r24
 194:	41 f4       	brne	.+16     	; 0x1a6 <Transmit_SPI_Master+0x18>
		SPI_STATE = MSB_SENT;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 03 01 	sts	0x0103, r24
		PORTB &= ~(1 << SS); 		  //Assert slave select (active low) 		
 19c:	28 98       	cbi	0x05, 0	; 5
		SPDR = SPI_MSB;
 19e:	80 91 02 01 	lds	r24, 0x0102
 1a2:	8e bd       	out	0x2e, r24	; 46
 1a4:	08 95       	ret
	}
	else if (SPI_STATE == MSB_SENT) {
 1a6:	80 91 03 01 	lds	r24, 0x0103
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	39 f4       	brne	.+14     	; 0x1bc <Transmit_SPI_Master+0x2e>
		SPI_STATE = LSB_SENT;
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	80 93 03 01 	sts	0x0103, r24
		SPDR = SPI_LSB;
 1b4:	80 91 01 01 	lds	r24, 0x0101
 1b8:	8e bd       	out	0x2e, r24	; 46
 1ba:	08 95       	ret
	}
	else {
		SPI_STATE = XFER_FINISHED;
 1bc:	10 92 03 01 	sts	0x0103, r1
		PORTB |= 1 << SS;
 1c0:	28 9a       	sbi	0x05, 0	; 5
 1c2:	08 95       	ret

000001c4 <__vector_24>:
	}
}

ISR(SPI_STC_vect) {
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	cli();
 1e6:	f8 94       	cli
	Transmit_SPI_Master();
 1e8:	0e 94 c7 00 	call	0x18e	; 0x18e <Transmit_SPI_Master>
	sei();
 1ec:	78 94       	sei
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_17>:

ISR(TIMER1_COMPA_vect) {
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	set_DAC_data(0xFFF);
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	0e 94 ac 00 	call	0x158	; 0x158 <set_DAC_data>
	Transmit_SPI_Master();
 23a:	0e 94 c7 00 	call	0x18e	; 0x18e <Transmit_SPI_Master>
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <__vector_18>:

ISR(TIMER1_COMPB_vect) {
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	2f 93       	push	r18
 26c:	3f 93       	push	r19
 26e:	4f 93       	push	r20
 270:	5f 93       	push	r21
 272:	6f 93       	push	r22
 274:	7f 93       	push	r23
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	af 93       	push	r26
 27c:	bf 93       	push	r27
 27e:	ef 93       	push	r30
 280:	ff 93       	push	r31
	set_DAC_data(0);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 ac 00 	call	0x158	; 0x158 <set_DAC_data>
	Transmit_SPI_Master();
 28a:	0e 94 c7 00 	call	0x18e	; 0x18e <Transmit_SPI_Master>
}
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	7f 91       	pop	r23
 29c:	6f 91       	pop	r22
 29e:	5f 91       	pop	r21
 2a0:	4f 91       	pop	r20
 2a2:	3f 91       	pop	r19
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <__udivmodhi4>:
 2b0:	aa 1b       	sub	r26, r26
 2b2:	bb 1b       	sub	r27, r27
 2b4:	51 e1       	ldi	r21, 0x11	; 17
 2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <__udivmodhi4_ep>

000002b8 <__udivmodhi4_loop>:
 2b8:	aa 1f       	adc	r26, r26
 2ba:	bb 1f       	adc	r27, r27
 2bc:	a6 17       	cp	r26, r22
 2be:	b7 07       	cpc	r27, r23
 2c0:	10 f0       	brcs	.+4      	; 0x2c6 <__udivmodhi4_ep>
 2c2:	a6 1b       	sub	r26, r22
 2c4:	b7 0b       	sbc	r27, r23

000002c6 <__udivmodhi4_ep>:
 2c6:	88 1f       	adc	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	5a 95       	dec	r21
 2cc:	a9 f7       	brne	.-22     	; 0x2b8 <__udivmodhi4_loop>
 2ce:	80 95       	com	r24
 2d0:	90 95       	com	r25
 2d2:	bc 01       	movw	r22, r24
 2d4:	cd 01       	movw	r24, r26
 2d6:	08 95       	ret

000002d8 <__divmodsi4>:
 2d8:	97 fb       	bst	r25, 7
 2da:	09 2e       	mov	r0, r25
 2dc:	05 26       	eor	r0, r21
 2de:	0e d0       	rcall	.+28     	; 0x2fc <__divmodsi4_neg1>
 2e0:	57 fd       	sbrc	r21, 7
 2e2:	04 d0       	rcall	.+8      	; 0x2ec <__divmodsi4_neg2>
 2e4:	14 d0       	rcall	.+40     	; 0x30e <__udivmodsi4>
 2e6:	0a d0       	rcall	.+20     	; 0x2fc <__divmodsi4_neg1>
 2e8:	00 1c       	adc	r0, r0
 2ea:	38 f4       	brcc	.+14     	; 0x2fa <__divmodsi4_exit>

000002ec <__divmodsi4_neg2>:
 2ec:	50 95       	com	r21
 2ee:	40 95       	com	r20
 2f0:	30 95       	com	r19
 2f2:	21 95       	neg	r18
 2f4:	3f 4f       	sbci	r19, 0xFF	; 255
 2f6:	4f 4f       	sbci	r20, 0xFF	; 255
 2f8:	5f 4f       	sbci	r21, 0xFF	; 255

000002fa <__divmodsi4_exit>:
 2fa:	08 95       	ret

000002fc <__divmodsi4_neg1>:
 2fc:	f6 f7       	brtc	.-4      	; 0x2fa <__divmodsi4_exit>
 2fe:	90 95       	com	r25
 300:	80 95       	com	r24
 302:	70 95       	com	r23
 304:	61 95       	neg	r22
 306:	7f 4f       	sbci	r23, 0xFF	; 255
 308:	8f 4f       	sbci	r24, 0xFF	; 255
 30a:	9f 4f       	sbci	r25, 0xFF	; 255
 30c:	08 95       	ret

0000030e <__udivmodsi4>:
 30e:	a1 e2       	ldi	r26, 0x21	; 33
 310:	1a 2e       	mov	r1, r26
 312:	aa 1b       	sub	r26, r26
 314:	bb 1b       	sub	r27, r27
 316:	fd 01       	movw	r30, r26
 318:	0d c0       	rjmp	.+26     	; 0x334 <__udivmodsi4_ep>

0000031a <__udivmodsi4_loop>:
 31a:	aa 1f       	adc	r26, r26
 31c:	bb 1f       	adc	r27, r27
 31e:	ee 1f       	adc	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	a2 17       	cp	r26, r18
 324:	b3 07       	cpc	r27, r19
 326:	e4 07       	cpc	r30, r20
 328:	f5 07       	cpc	r31, r21
 32a:	20 f0       	brcs	.+8      	; 0x334 <__udivmodsi4_ep>
 32c:	a2 1b       	sub	r26, r18
 32e:	b3 0b       	sbc	r27, r19
 330:	e4 0b       	sbc	r30, r20
 332:	f5 0b       	sbc	r31, r21

00000334 <__udivmodsi4_ep>:
 334:	66 1f       	adc	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	88 1f       	adc	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	1a 94       	dec	r1
 33e:	69 f7       	brne	.-38     	; 0x31a <__udivmodsi4_loop>
 340:	60 95       	com	r22
 342:	70 95       	com	r23
 344:	80 95       	com	r24
 346:	90 95       	com	r25
 348:	9b 01       	movw	r18, r22
 34a:	ac 01       	movw	r20, r24
 34c:	bd 01       	movw	r22, r26
 34e:	cf 01       	movw	r24, r30
 350:	08 95       	ret

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>

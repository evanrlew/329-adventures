
Proj3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00000556  000005ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000556  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  008001e0  008001e0  000006ca  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000e20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a7  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000032c  00000000  00000000  000018c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cf  00000000  00000000  00001bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000021c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d6  00000000  00000000  000023b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000317  00000000  00000000  0000268e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_17>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 a1 01 	jmp	0x342	; 0x342 <__vector_24>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e5       	ldi	r30, 0x56	; 86
  c0:	f5 e0       	ldi	r31, 0x05	; 5
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 3e       	cpi	r26, 0xE0	; 224
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 ee       	ldi	r26, 0xE0	; 224
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a9 3e       	cpi	r26, 0xE9	; 233
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  e2:	0c 94 a9 02 	jmp	0x552	; 0x552 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <change_velocity_scale>:
	}
}

void change_velocity_scale(uint8_t velocity) {
	
	if (velocity > 96) {
  ea:	81 36       	cpi	r24, 0x61	; 97
  ec:	18 f0       	brcs	.+6      	; 0xf4 <change_velocity_scale+0xa>
		velocity_scale = 0;
  ee:	10 92 b1 01 	sts	0x01B1, r1
  f2:	08 95       	ret
	}		
	else if (velocity > 64) {
  f4:	81 34       	cpi	r24, 0x41	; 65
  f6:	20 f0       	brcs	.+8      	; 0x100 <change_velocity_scale+0x16>
		velocity_scale = 1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 b1 01 	sts	0x01B1, r24
  fe:	08 95       	ret
	}
	else if (velocity > 32) {
 100:	81 32       	cpi	r24, 0x21	; 33
 102:	20 f0       	brcs	.+8      	; 0x10c <change_velocity_scale+0x22>
		velocity_scale = 2;
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 b1 01 	sts	0x01B1, r24
 10a:	08 95       	ret
	}
	else {
		velocity_scale = 3;
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 b1 01 	sts	0x01B1, r24
 112:	08 95       	ret

00000114 <make_noise>:
void make_noise() {
	uint8_t uart_data;
	uint8_t key;
	uint8_t velocity;

	if (usart_istheredata()) {
 114:	0e 94 19 01 	call	0x232	; 0x232 <usart_istheredata>
 118:	88 23       	and	r24, r24
 11a:	b1 f1       	breq	.+108    	; 0x188 <make_noise+0x74>
		uart_data = usart_recv(); // receive midi data - note on/off
 11c:	0e 94 11 01 	call	0x222	; 0x222 <usart_recv>

		if ((uart_data & ON_CMD)) { // && (uart_data & CHANNEL_MASK == CHANNEL_NUM)) {
 120:	98 2f       	mov	r25, r24
 122:	90 79       	andi	r25, 0x90	; 144
 124:	11 f1       	breq	.+68     	; 0x16a <make_noise+0x56>
			timer3_on();
 126:	0e 94 27 01 	call	0x24e	; 0x24e <timer3_on>
			key = usart_recv();
 12a:	0e 94 11 01 	call	0x222	; 0x222 <usart_recv>
				
			key = key < 21? 0: key - 21;
 12e:	85 31       	cpi	r24, 0x15	; 21
 130:	10 f0       	brcs	.+4      	; 0x136 <make_noise+0x22>
 132:	85 51       	subi	r24, 0x15	; 21
 134:	01 c0       	rjmp	.+2      	; 0x138 <make_noise+0x24>
 136:	80 e0       	ldi	r24, 0x00	; 0
			
			freq = MIDI_TO_FREQ[key];
 138:	e8 2f       	mov	r30, r24
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	e0 50       	subi	r30, 0x00	; 0
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	80 81       	ld	r24, Z
 146:	91 81       	ldd	r25, Z+1	; 0x01
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	80 93 b5 01 	sts	0x01B5, r24
 150:	90 93 b6 01 	sts	0x01B6, r25
 154:	a0 93 b7 01 	sts	0x01B7, r26
 158:	b0 93 b8 01 	sts	0x01B8, r27
			set_wave();
 15c:	0e 94 39 01 	call	0x272	; 0x272 <set_wave>
			
			velocity = usart_recv();
 160:	0e 94 11 01 	call	0x222	; 0x222 <usart_recv>
			change_velocity_scale(velocity);
 164:	0e 94 75 00 	call	0xea	; 0xea <change_velocity_scale>
 168:	08 95       	ret
		}
		else if ((uart_data & OFF_CMD)) {// && (uart_data & CHANNEL_MASK == CHANNEL_NUM)) {
 16a:	88 23       	and	r24, r24
 16c:	3c f4       	brge	.+14     	; 0x17c <make_noise+0x68>
			timer3_off();
 16e:	0e 94 31 01 	call	0x262	; 0x262 <timer3_off>
			usart_recv();
 172:	0e 94 11 01 	call	0x222	; 0x222 <usart_recv>
			usart_recv();
 176:	0e 94 11 01 	call	0x222	; 0x222 <usart_recv>
 17a:	08 95       	ret
		}
		else {
			timer3_off();
 17c:	0e 94 31 01 	call	0x262	; 0x262 <timer3_off>
			usart_recv();
 180:	0e 94 11 01 	call	0x222	; 0x222 <usart_recv>
			usart_recv();
 184:	0e 94 11 01 	call	0x222	; 0x222 <usart_recv>
 188:	08 95       	ret

0000018a <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void)
{	
	usart_init(31250, F_CPU);
 18a:	82 e1       	ldi	r24, 0x12	; 18
 18c:	9a e7       	ldi	r25, 0x7A	; 122
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	54 e2       	ldi	r21, 0x24	; 36
 192:	64 ef       	ldi	r22, 0xF4	; 244
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <usart_init>
	//initTimer1(); // timer for square
	initTimer3(); // timer for sine/sawtooth
 19a:	0e 94 1d 01 	call	0x23a	; 0x23a <initTimer3>
	set_wave();
 19e:	0e 94 39 01 	call	0x272	; 0x272 <set_wave>
	
	timer3_off();
 1a2:	0e 94 31 01 	call	0x262	; 0x262 <timer3_off>
	//timer3_on();
	sei();
 1a6:	78 94       	sei

	Initialize_SPI_Master();
 1a8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Initialize_SPI_Master>
	
	while (1) {
		make_noise();
 1ac:	0e 94 8a 00 	call	0x114	; 0x114 <make_noise>
 1b0:	fd cf       	rjmp	.-6      	; 0x1ac <main+0x22>

000001b2 <usart_init>:
#define F_CPU 16000000
#include <util/delay.h>

#define BAUD_PRESCALE 103
void usart_init(uint16_t baudin, uint32_t clk_speedin)
{
 1b2:	cf 92       	push	r12
 1b4:	df 92       	push	r13
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
	uint32_t ubrr = (clk_speedin/16UL)/baudin-1;
 1ba:	6a 01       	movw	r12, r20
 1bc:	7b 01       	movw	r14, r22
 1be:	68 94       	set
 1c0:	13 f8       	bld	r1, 3
 1c2:	f6 94       	lsr	r15
 1c4:	e7 94       	ror	r14
 1c6:	d7 94       	ror	r13
 1c8:	c7 94       	ror	r12
 1ca:	16 94       	lsr	r1
 1cc:	d1 f7       	brne	.-12     	; 0x1c2 <usart_init+0x10>
 1ce:	9c 01       	movw	r18, r24
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	c7 01       	movw	r24, r14
 1d6:	b6 01       	movw	r22, r12
 1d8:	0e 94 87 02 	call	0x50e	; 0x50e <__udivmodsi4>
 1dc:	da 01       	movw	r26, r20
 1de:	c9 01       	movw	r24, r18
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	a1 09       	sbc	r26, r1
 1e4:	b1 09       	sbc	r27, r1
	UBRR1H = (unsigned char)(ubrr>>8) & 0xF;
 1e6:	29 2f       	mov	r18, r25
 1e8:	2f 70       	andi	r18, 0x0F	; 15
 1ea:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubrr;
 1ee:	80 93 cc 00 	sts	0x00CC, r24
	/*UBRR0H = (BAUD_PRESCALE>>8);
	UBRR0L = BAUD_PRESCALE;*/
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 1f2:	88 e1       	ldi	r24, 0x18	; 24
 1f4:	80 93 c9 00 	sts	0x00C9, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);
 1f8:	8e e0       	ldi	r24, 0x0E	; 14
 1fa:	80 93 ca 00 	sts	0x00CA, r24
	UCSR1A &= ~(1<<U2X1);
 1fe:	e8 ec       	ldi	r30, 0xC8	; 200
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	8d 7f       	andi	r24, 0xFD	; 253
 206:	80 83       	st	Z, r24
}
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	df 90       	pop	r13
 20e:	cf 90       	pop	r12
 210:	08 95       	ret

00000212 <usart_send>:

/*the send function will put 8bits on the trans line. */
void usart_send( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) );
 212:	e8 ec       	ldi	r30, 0xC8	; 200
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	90 81       	ld	r25, Z
 218:	95 ff       	sbrs	r25, 5
 21a:	fd cf       	rjmp	.-6      	; 0x216 <usart_send+0x4>
	/* Put data into buffer, sends the data */
	UDR1 = data;
 21c:	80 93 ce 00 	sts	0x00CE, r24
}
 220:	08 95       	ret

00000222 <usart_recv>:
	@return 8bit data packet from sender
*/
uint8_t  usart_recv(void)
{
	/* Wait for data to be received */
	while ( !(UCSR1A & (1<<RXC1)) )
 222:	e8 ec       	ldi	r30, 0xC8	; 200
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	88 23       	and	r24, r24
 22a:	ec f7       	brge	.-6      	; 0x226 <usart_recv+0x4>
	;
	/* Get and return received data from buffer */
	return UDR1;
 22c:	80 91 ce 00 	lds	r24, 0x00CE
}
 230:	08 95       	ret

00000232 <usart_istheredata>:

/* function check to see if there is data to be received
	@return true is there is data ready to be read */
uint8_t  usart_istheredata(void)
{
	 return (UCSR1A & (1<<RXC1));
 232:	80 91 c8 00 	lds	r24, 0x00C8
 236:	80 78       	andi	r24, 0x80	; 128
 238:	08 95       	ret

0000023a <initTimer3>:
	TIFR1 = 0x00;
}*/

void initTimer3(void)
{
	TCCR1A = 0x00;                // configure counter wave mode and compare mode
 23a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1<<WGM12);          // clock off , wave mode
 23e:	88 e0       	ldi	r24, 0x08	; 8
 240:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A); // enable interrupts for a
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	80 93 6f 00 	sts	0x006F, r24
	TIFR1 = 0x00;
 24a:	16 ba       	out	0x16, r1	; 22
}
 24c:	08 95       	ret

0000024e <timer3_on>:
	TCCR1B &= ~(1 << CS10 | 1 << CS11 | 1 << CS12);
	TIMSK1 = 0;
}*/

void timer3_on(void) {
	TCCR1B |= (1<<CS10); // no prescale on the clock
 24e:	e1 e8       	ldi	r30, 0x81	; 129
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 83       	st	Z, r24
	TIMSK1 = (1<<OCIE1A);
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	80 93 6f 00 	sts	0x006F, r24
	TIFR1 = 0x00;
 25e:	16 ba       	out	0x16, r1	; 22
}	
 260:	08 95       	ret

00000262 <timer3_off>:
	
void timer3_off(void) {
	TCCR1B &= ~(1 << CS10);
 262:	e1 e8       	ldi	r30, 0x81	; 129
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	8e 7f       	andi	r24, 0xFE	; 254
 26a:	80 83       	st	Z, r24
	TIMSK1 = 0;
 26c:	10 92 6f 00 	sts	0x006F, r1
}
 270:	08 95       	ret

00000272 <set_wave>:
	
	// calculate and set duty
	OCR1BH = ticks_per_duty >> 8 & 0xFF;
	OCR1BL = ticks_per_duty & 0xFF;*/

	if (fg_state == SAWTOOTH) {
 272:	80 91 b0 01 	lds	r24, 0x01B0
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	91 f4       	brne	.+36     	; 0x29e <set_wave+0x2c>
		saw_ticks_per_step = F_CPU / freq / NUM_SAW_POINTS;
 27a:	20 91 b5 01 	lds	r18, 0x01B5
 27e:	30 91 b6 01 	lds	r19, 0x01B6
 282:	40 91 b7 01 	lds	r20, 0x01B7
 286:	50 91 b8 01 	lds	r21, 0x01B8
 28a:	60 e4       	ldi	r22, 0x40	; 64
 28c:	72 e4       	ldi	r23, 0x42	; 66
 28e:	8f e0       	ldi	r24, 0x0F	; 15
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 87 02 	call	0x50e	; 0x50e <__udivmodsi4>
		OCR1AH = saw_ticks_per_step >> 8;
 296:	30 93 89 00 	sts	0x0089, r19
		OCR1AL = saw_ticks_per_step & 0xFF;
 29a:	20 93 88 00 	sts	0x0088, r18
	}	
	if (fg_state == SINE) {
 29e:	80 91 b0 01 	lds	r24, 0x01B0
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	99 f4       	brne	.+38     	; 0x2cc <set_wave+0x5a>
		sin_ticks_per_step = F_CPU / freq / NUM_SINE_POINTS;
 2a6:	20 91 b5 01 	lds	r18, 0x01B5
 2aa:	30 91 b6 01 	lds	r19, 0x01B6
 2ae:	40 91 b7 01 	lds	r20, 0x01B7
 2b2:	50 91 b8 01 	lds	r21, 0x01B8
 2b6:	60 e4       	ldi	r22, 0x40	; 64
 2b8:	72 e4       	ldi	r23, 0x42	; 66
 2ba:	8f e0       	ldi	r24, 0x0F	; 15
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 87 02 	call	0x50e	; 0x50e <__udivmodsi4>
		OCR1AH = sin_ticks_per_step >> 8;
 2c2:	30 93 89 00 	sts	0x0089, r19
		OCR1AL = sin_ticks_per_step & 0xFF;		
 2c6:	20 93 88 00 	sts	0x0088, r18
 2ca:	08 95       	ret
	}
	else if (fg_state == TRIANGLE) {
 2cc:	80 91 b0 01 	lds	r24, 0x01B0
 2d0:	83 30       	cpi	r24, 0x03	; 3
 2d2:	61 f4       	brne	.+24     	; 0x2ec <set_wave+0x7a>
		tri_ticks_per_step = F_CPU / freq / NUM_TRI_POINTS;
 2d4:	80 91 b5 01 	lds	r24, 0x01B5
 2d8:	90 91 b6 01 	lds	r25, 0x01B6
 2dc:	a0 91 b7 01 	lds	r26, 0x01B7
 2e0:	b0 91 b8 01 	lds	r27, 0x01B8
		OCR1AH = sin_ticks_per_step >> 8;
 2e4:	10 92 89 00 	sts	0x0089, r1
		OCR1AL = sin_ticks_per_step & 0xFF;
 2e8:	10 92 88 00 	sts	0x0088, r1
 2ec:	08 95       	ret

000002ee <set_DAC_data>:
	}
}

void set_DAC_data(uint16_t data) {
	spi_msb = (data >> 8 & 0xF) | 0x70;
 2ee:	9f 70       	andi	r25, 0x0F	; 15
 2f0:	90 67       	ori	r25, 0x70	; 112
 2f2:	90 93 e1 01 	sts	0x01E1, r25
	spi_lsb = data & 0xFF;
 2f6:	80 93 e0 01 	sts	0x01E0, r24
}
 2fa:	08 95       	ret

000002fc <Initialize_SPI_Master>:

void Initialize_SPI_Master(void)
{
	DDRB = 1<<MOSI | 1<<SCK | 1<<SS; // make MOSI, SCK and SS outputs
 2fc:	87 e0       	ldi	r24, 0x07	; 7
 2fe:	84 b9       	out	0x04, r24	; 4
		
	SPCR = (1<<SPIE) | 		//No interrupts
 300:	80 ed       	ldi	r24, 0xD0	; 208
 302:	8c bd       	out	0x2c, r24	; 44
	(1<<MSTR) | 			//master
	(0<<CPOL) | 			//clock idles low
	(0<<CPHA) | 			//sample falling clock edge
	(0<<SPR1) | (0<<SPR0) ; //clock speed
	
	SPSR = (0<<SPIF) | 		//SPI interrupt flag
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	8d bd       	out	0x2d, r24	; 45
	(0<<WCOL) | 			//Write collision flag
	(1<<SPI2X) ; 			//Doubles SPI clock
	PORTB = 1 << SS;  		// make sure SS is high
 308:	85 b9       	out	0x05, r24	; 5
}
 30a:	08 95       	ret

0000030c <Transmit_SPI_Master>:

void Transmit_SPI_Master(void) {
	
	if (spi_state == XFER_FINISHED) {
 30c:	80 91 e2 01 	lds	r24, 0x01E2
 310:	88 23       	and	r24, r24
 312:	41 f4       	brne	.+16     	; 0x324 <Transmit_SPI_Master+0x18>
		spi_state = MSB_SENT;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 e2 01 	sts	0x01E2, r24
		PORTB &= ~(1 << SS); 		  //Assert slave select (active low) 		
 31a:	28 98       	cbi	0x05, 0	; 5
		SPDR = spi_msb;
 31c:	80 91 e1 01 	lds	r24, 0x01E1
 320:	8e bd       	out	0x2e, r24	; 46
 322:	08 95       	ret
	}
	else if (spi_state == MSB_SENT) {
 324:	80 91 e2 01 	lds	r24, 0x01E2
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	39 f4       	brne	.+14     	; 0x33a <Transmit_SPI_Master+0x2e>
		spi_state = LSB_SENT;
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	80 93 e2 01 	sts	0x01E2, r24
		SPDR = spi_lsb;
 332:	80 91 e0 01 	lds	r24, 0x01E0
 336:	8e bd       	out	0x2e, r24	; 46
 338:	08 95       	ret
	}
	else {
		spi_state = XFER_FINISHED;
 33a:	10 92 e2 01 	sts	0x01E2, r1
		PORTB |= 1 << SS;
 33e:	28 9a       	sbi	0x05, 0	; 5
 340:	08 95       	ret

00000342 <__vector_24>:
	}
}


ISR(SPI_STC_vect) {
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	2f 93       	push	r18
 34e:	3f 93       	push	r19
 350:	4f 93       	push	r20
 352:	5f 93       	push	r21
 354:	6f 93       	push	r22
 356:	7f 93       	push	r23
 358:	8f 93       	push	r24
 35a:	9f 93       	push	r25
 35c:	af 93       	push	r26
 35e:	bf 93       	push	r27
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
	Transmit_SPI_Master();
 364:	0e 94 86 01 	call	0x30c	; 0x30c <Transmit_SPI_Master>
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__vector_17>:
ISR(TIMER1_COMPB_vect) {
	set_DAC_data(0);
	Transmit_SPI_Master();
*/

ISR(TIMER1_COMPA_vect) {
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	2f 93       	push	r18
 396:	3f 93       	push	r19
 398:	4f 93       	push	r20
 39a:	5f 93       	push	r21
 39c:	6f 93       	push	r22
 39e:	7f 93       	push	r23
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	af 93       	push	r26
 3a6:	bf 93       	push	r27
 3a8:	ef 93       	push	r30
 3aa:	ff 93       	push	r31
	uint16_t dac_val = 0;

	if (fg_state == SAWTOOTH) {	
 3ac:	80 91 b0 01 	lds	r24, 0x01B0
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	11 f5       	brne	.+68     	; 0x3f8 <__vector_17+0x6e>
		static uint16_t saw_val = 0;

		if (saw_val == 0xFFF) {
 3b4:	80 91 e3 01 	lds	r24, 0x01E3
 3b8:	90 91 e4 01 	lds	r25, 0x01E4
 3bc:	2f e0       	ldi	r18, 0x0F	; 15
 3be:	8f 3f       	cpi	r24, 0xFF	; 255
 3c0:	92 07       	cpc	r25, r18
 3c2:	29 f4       	brne	.+10     	; 0x3ce <__vector_17+0x44>
			saw_val = 0;
 3c4:	10 92 e4 01 	sts	0x01E4, r1
 3c8:	10 92 e3 01 	sts	0x01E3, r1
 3cc:	10 c0       	rjmp	.+32     	; 0x3ee <__vector_17+0x64>
		}			
		else {
			saw_val += 4096 / NUM_SAW_POINTS;
 3ce:	80 50       	subi	r24, 0x00	; 0
 3d0:	9f 4f       	sbci	r25, 0xFF	; 255
 3d2:	90 93 e4 01 	sts	0x01E4, r25
 3d6:	80 93 e3 01 	sts	0x01E3, r24
		}			

		if (saw_val >= 0x1000) { // dac can only take in 0xFFF and lower
 3da:	40 e1       	ldi	r20, 0x10	; 16
 3dc:	80 30       	cpi	r24, 0x00	; 0
 3de:	94 07       	cpc	r25, r20
 3e0:	30 f0       	brcs	.+12     	; 0x3ee <__vector_17+0x64>
			saw_val = 0xFFF;
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	9f e0       	ldi	r25, 0x0F	; 15
 3e6:	90 93 e4 01 	sts	0x01E4, r25
 3ea:	80 93 e3 01 	sts	0x01E3, r24
		}			
		
		dac_val = saw_val;
 3ee:	20 91 e3 01 	lds	r18, 0x01E3
 3f2:	30 91 e4 01 	lds	r19, 0x01E4
 3f6:	67 c0       	rjmp	.+206    	; 0x4c6 <__vector_17+0x13c>
	}
	else if (fg_state == SINE) {
 3f8:	80 91 b0 01 	lds	r24, 0x01B0
 3fc:	82 30       	cpi	r24, 0x02	; 2
 3fe:	e1 f4       	brne	.+56     	; 0x438 <__vector_17+0xae>
		static uint16_t sine_cnt = 0;
		
		if (sine_cnt == NUM_SINE_POINTS) {
 400:	80 91 e5 01 	lds	r24, 0x01E5
 404:	90 91 e6 01 	lds	r25, 0x01E6
 408:	80 31       	cpi	r24, 0x10	; 16
 40a:	91 05       	cpc	r25, r1
 40c:	21 f4       	brne	.+8      	; 0x416 <__vector_17+0x8c>
			sine_cnt = 0;
 40e:	10 92 e6 01 	sts	0x01E6, r1
 412:	10 92 e5 01 	sts	0x01E5, r1
		}

		dac_val = SINE_VALS[sine_cnt];
 416:	80 91 e5 01 	lds	r24, 0x01E5
 41a:	90 91 e6 01 	lds	r25, 0x01E6
 41e:	fc 01       	movw	r30, r24
 420:	ee 0f       	add	r30, r30
 422:	ff 1f       	adc	r31, r31
 424:	e3 54       	subi	r30, 0x43	; 67
 426:	fe 4f       	sbci	r31, 0xFE	; 254
 428:	20 81       	ld	r18, Z
 42a:	31 81       	ldd	r19, Z+1	; 0x01
		sine_cnt ++;
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	90 93 e6 01 	sts	0x01E6, r25
 432:	80 93 e5 01 	sts	0x01E5, r24
 436:	47 c0       	rjmp	.+142    	; 0x4c6 <__vector_17+0x13c>
	}
	else if (fg_state == TRIANGLE) {
 438:	80 91 b0 01 	lds	r24, 0x01B0
 43c:	83 30       	cpi	r24, 0x03	; 3
 43e:	09 f0       	breq	.+2      	; 0x442 <__vector_17+0xb8>
 440:	40 c0       	rjmp	.+128    	; 0x4c2 <__vector_17+0x138>
		static int direction = 1;
		static uint16_t tri_val = 0;
						
		tri_val += direction * 2 * 4096 / NUM_TRI_POINTS;
 442:	20 91 dd 01 	lds	r18, 0x01DD
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	92 2f       	mov	r25, r18
 44a:	92 95       	swap	r25
 44c:	99 0f       	add	r25, r25
 44e:	90 7e       	andi	r25, 0xE0	; 224
 450:	99 23       	and	r25, r25
 452:	0c f4       	brge	.+2      	; 0x456 <__vector_17+0xcc>
 454:	0f 96       	adiw	r24, 0x0f	; 15
 456:	95 95       	asr	r25
 458:	87 95       	ror	r24
 45a:	95 95       	asr	r25
 45c:	87 95       	ror	r24
 45e:	95 95       	asr	r25
 460:	87 95       	ror	r24
 462:	95 95       	asr	r25
 464:	87 95       	ror	r24
 466:	20 91 e7 01 	lds	r18, 0x01E7
 46a:	30 91 e8 01 	lds	r19, 0x01E8
 46e:	82 0f       	add	r24, r18
 470:	93 1f       	adc	r25, r19
 472:	90 93 e8 01 	sts	0x01E8, r25
 476:	80 93 e7 01 	sts	0x01E7, r24
		
		if (tri_val >= 4096) {
 47a:	50 e1       	ldi	r21, 0x10	; 16
 47c:	80 30       	cpi	r24, 0x00	; 0
 47e:	95 07       	cpc	r25, r21
 480:	68 f0       	brcs	.+26     	; 0x49c <__vector_17+0x112>
			tri_val = 0xFFF;
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	9f e0       	ldi	r25, 0x0F	; 15
 486:	90 93 e8 01 	sts	0x01E8, r25
 48a:	80 93 e7 01 	sts	0x01E7, r24
			direction = -1;
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	9f ef       	ldi	r25, 0xFF	; 255
 492:	90 93 de 01 	sts	0x01DE, r25
 496:	80 93 dd 01 	sts	0x01DD, r24
 49a:	0e c0       	rjmp	.+28     	; 0x4b8 <__vector_17+0x12e>
		} 
		else if (tri_val <  2 * 4096 / NUM_TRI_POINTS) {
 49c:	22 e0       	ldi	r18, 0x02	; 2
 49e:	80 30       	cpi	r24, 0x00	; 0
 4a0:	92 07       	cpc	r25, r18
 4a2:	50 f4       	brcc	.+20     	; 0x4b8 <__vector_17+0x12e>
			tri_val = 0;
 4a4:	10 92 e8 01 	sts	0x01E8, r1
 4a8:	10 92 e7 01 	sts	0x01E7, r1
			direction = 1;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	90 93 de 01 	sts	0x01DE, r25
 4b4:	80 93 dd 01 	sts	0x01DD, r24
		}
		
		dac_val = tri_val;
 4b8:	20 91 e7 01 	lds	r18, 0x01E7
 4bc:	30 91 e8 01 	lds	r19, 0x01E8
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__vector_17+0x13c>
	set_DAC_data(0);
	Transmit_SPI_Master();
*/

ISR(TIMER1_COMPA_vect) {
	uint16_t dac_val = 0;
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
		}
		
		dac_val = tri_val;
	}

	dac_val = dac_val >> velocity_scale;
 4c6:	80 91 b1 01 	lds	r24, 0x01B1
 4ca:	90 91 b2 01 	lds	r25, 0x01B2
 4ce:	a0 91 b3 01 	lds	r26, 0x01B3
 4d2:	b0 91 b4 01 	lds	r27, 0x01B4
	set_DAC_data(dac_val);
 4d6:	a9 01       	movw	r20, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <__vector_17+0x154>
 4da:	56 95       	lsr	r21
 4dc:	47 95       	ror	r20
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <__vector_17+0x150>
 4e2:	ca 01       	movw	r24, r20
 4e4:	0e 94 77 01 	call	0x2ee	; 0x2ee <set_DAC_data>
	Transmit_SPI_Master();
 4e8:	0e 94 86 01 	call	0x30c	; 0x30c <Transmit_SPI_Master>
}
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	7f 91       	pop	r23
 4fa:	6f 91       	pop	r22
 4fc:	5f 91       	pop	r21
 4fe:	4f 91       	pop	r20
 500:	3f 91       	pop	r19
 502:	2f 91       	pop	r18
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	1f 90       	pop	r1
 50c:	18 95       	reti

0000050e <__udivmodsi4>:
 50e:	a1 e2       	ldi	r26, 0x21	; 33
 510:	1a 2e       	mov	r1, r26
 512:	aa 1b       	sub	r26, r26
 514:	bb 1b       	sub	r27, r27
 516:	fd 01       	movw	r30, r26
 518:	0d c0       	rjmp	.+26     	; 0x534 <__udivmodsi4_ep>

0000051a <__udivmodsi4_loop>:
 51a:	aa 1f       	adc	r26, r26
 51c:	bb 1f       	adc	r27, r27
 51e:	ee 1f       	adc	r30, r30
 520:	ff 1f       	adc	r31, r31
 522:	a2 17       	cp	r26, r18
 524:	b3 07       	cpc	r27, r19
 526:	e4 07       	cpc	r30, r20
 528:	f5 07       	cpc	r31, r21
 52a:	20 f0       	brcs	.+8      	; 0x534 <__udivmodsi4_ep>
 52c:	a2 1b       	sub	r26, r18
 52e:	b3 0b       	sbc	r27, r19
 530:	e4 0b       	sbc	r30, r20
 532:	f5 0b       	sbc	r31, r21

00000534 <__udivmodsi4_ep>:
 534:	66 1f       	adc	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	88 1f       	adc	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	1a 94       	dec	r1
 53e:	69 f7       	brne	.-38     	; 0x51a <__udivmodsi4_loop>
 540:	60 95       	com	r22
 542:	70 95       	com	r23
 544:	80 95       	com	r24
 546:	90 95       	com	r25
 548:	9b 01       	movw	r18, r22
 54a:	ac 01       	movw	r20, r24
 54c:	bd 01       	movw	r22, r26
 54e:	cf 01       	movw	r24, r30
 550:	08 95       	ret

00000552 <_exit>:
 552:	f8 94       	cli

00000554 <__stop_program>:
 554:	ff cf       	rjmp	.-2      	; 0x554 <__stop_program>
